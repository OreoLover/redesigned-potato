/*******************************Copyright (c)*********************************************
**                University of Electronic Science and Technology of China
**                  School of Communication and Information Engineering
**                          http://www.uestc.edu.cn
**
**--------------------------- File Info ---------------------------------------------------
** File name:           search.cpp
** Last modified Date:  2012-12-19
** Last Version:        1.0
** Descriptions:        各种检索操作，顺序表结构的定义在mystruct.h中，
**                      函数中使用的与界面显示有关接口的说明在ui.h
**                      本文件基于C语言风格
**------------------------------------------------------------------------------------------
** Created by:          Duan Jingshan
** Created date:        2012-12-19
**------------------------------------------------------------------------------------------
** Modified by:   
** Modified date: 
** Version:    
** Descriptions:  
**
*******************************************************************************************/
#include "stdafx.h"
#include "mystruct.h"
#include "ui.h"
/*******************************************************************************************
** Function name: sequence_search()
** Descriptions	:	顺序检索
**                  在顺序表中找到指定元素后，将元素值取出，放置到指定内存中，可能需要使用memcpy()
** Input:	
**        table_t * table; 顺序表指针
**        double stuNum;   待查询元素的关键字――学号
** Output:
**        element_t * elem; 用于存放指定元素内容的内存指针
**   return:  类型：int;待查元素在顺序表中的序号（从0开始），-1查询失败
** Created by	: 
** Created Date	: 
**------------------------------------------------------------------------------------------
** Modified by	:
** Modified Date: 
**------------------------------------------------------------------------------------------
*******************************************************************************************/
int sequence_search(table_t * table, double Num, element_t * elem)
{


	return 0;
}

/*******************************************************************************************
** Function name: binaray_search()
** Descriptions	:	二分检索
**                  在顺序表中找到指定元素后，将元素值取出，放置到指定内存中，可能需要使用memcpy()
** Input:	
**        table_t * table; 顺序表指针
**        double stuNum;   待查询元素的关键字――学号
** Output:
**        element_t * elem; 用于存放指定元素内容的内存指针
**   return:  类型：int;待查元素在顺序表中的序号（从0开始），-1查询失败
** Created by	: 
** Created Date	: 
**------------------------------------------------------------------------------------------
** Modified by	:
** Modified Date: 
**------------------------------------------------------------------------------------------
*******************************************************************************************/
int binary_search(table_t * table, double Num, element_t * elem)
{


	return 0;
}
/*******************************************************************************************
** Function name: hash()
** Descriptions	:	计算关键字的哈希值，即按照设定的Hash公式计算出关键字经过Hash运算后的结果
**                  本算法设定的Hash公式仿照Daniel J.Bernstein 教授设计的DJB算法，以学生姓名
**                  的字符串为输入关键字完成计算，然后再采用截断法，将结果的最后五位(二进制)
**                  输出，即获得0~31之间的Hash结果。
**         DJB算法：
**                  设输入为a(1)，a(2)，……a(n)这样的字节流(字符串)，
**                  hash(0) = 5381;
**                  hash(i) = (hash(i-1)*32 + hash(i-1)) + a(i)  for i = 1 to n
**                  result = hash(n) & 0x1f;
**               
** Input:	
**        char * stu_name; 学生姓名字符串
** Output:
**   return:  类型：int; Hash运算结果, 0 ~ 31
** Created by	: 
** Created Date	: 
**------------------------------------------------------------------------------------------
** Modified by	:
** Modified Date: 
**------------------------------------------------------------------------------------------
*******************************************************************************************/
int hash(char * stu_name)
{
	int i;
	long hash = 5381;
	
	for( i = 0; i < (int)strlen(stu_name) ; i ++){
		hash = ((hash << 5) + hash) + (long)stu_name[i];
	}
	return (int)(hash & 0x1f);
}
/*******************************************************************************************
** Function name: hash_search()
** Descriptions	:	hash检索, 根据关键字计算出的hash值对hash表进行检索。
**                  hash表中，学号为0表示该位置没有填写有效的内容
**                  冲突解决方法为线性探查法
** Input:	
**        table_t * table; 顺序表指针
**        char * stu_name;   待查询元素的关键字――姓名
** Output:
**        element_t * elem; 用于存放指定元素内容的内存指针
**   return:  类型：int;待查元素在顺序表中的序号（从0开始），-1查询失败
** Created by	: 
** Created Date	: 
**------------------------------------------------------------------------------------------
** Modified by	:
** Modified Date: 
**------------------------------------------------------------------------------------------
*******************************************************************************************/
int hash_search(table_t *table, char * stu_name, element_t * elem)
{

	return 0;

}
/*******************************************************************************************
** Function name: hash_insert()
** Descriptions	:	hash插入, 根据关键字计算出的hash值，将元素插入到hash表中。
**                  冲突解决方法为线性探查法
** Input:	
**        table_t * table; 顺序表指针
**        element_t elem;   新元素
** Output:
**   return:  类型：int ; 插入结果,0表示成功，-1表示失败。
** Created by	: 
** Created Date	: 
**------------------------------------------------------------------------------------------
** Modified by	:
** Modified Date: 
**------------------------------------------------------------------------------------------
*******************************************************************************************/
int hash_insert(table_t *table, element_t elem)
{

	
	return 0;

}