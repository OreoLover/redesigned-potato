/*******************************Copyright (c)*********************************************
**                University of Electronic Science and Technology of China
**                  School of Communication and Information Engineering
**                          http://www.uestc.edu.cn
**
**--------------------------- File Info ---------------------------------------------------
** File name:           mystruct.h
** Last modified Date:  2012-12-19
** Last Version:        1.0
** Descriptions:        本文件内容为在工程中需要的与UI界面有关的函数说明
**                      本文件基于C语言风格
**------------------------------------------------------------------------------------------
** Created by:          Duan Jingshan
** Created date:        2012-12-19
**------------------------------------------------------------------------------------------
** Modified by:   
** Modified date: 
** Version:    
** Descriptions:  
**
*******************************************************************************************/
#ifndef MY_UI_H
#define MY_UI_H

//
//AddReport
/*******************************************************************************************
** Function name: AddReport()
** Descriptions	:	向界面的日志窗口输出一个字符串,最新的日志将是最顶上的一条
** Input:	
**          CString csRept; 准备输出到窗口的字符串
** Output:  NONE
**   return:  类型：void
*******************************************************************************************/
extern void AddReport(CString csRept);
/*******************************************************************************************
** Function name: InsertElementAt()
** Descriptions	:	向界面的实验者结果窗口以插入一个表项的方式显示一个元素，
**                  所谓的插入表项的方式是指原位置元素及其之后的其它元素都将被整体向后挪动
** Input:	
**          int index; 显示位置,从1开始，如果要求的显示位置为-1或超过了现有表项数量，则新元素将做为
**                     最下面一条显示
**          element_t data;需要被显示的元素
** Output:  NONE
**   return:  类型：void
*******************************************************************************************/
extern void InsertElementAt(int index, element_t data);
/*******************************************************************************************
** Function name: ShowElementAt()
** Descriptions	:	向界面的实验者结果窗口以覆盖的方式显示一个元素，
**                  所谓的覆盖的方式是指原位置元素的显示内容将被新元素覆盖，而其它元素的位置保持不变
** Input:	
**          int index; 显示位置,从1开始，如果要求的显示位置为-1或超过了现有表项数量，则新元素将做为
**                     最下面一条显示
**          element_t data;需要被显示的元素
** Output:  NONE
**   return:  类型：void
*******************************************************************************************/
extern void ShowElementAt(int index, element_t data);
/*******************************************************************************************
** Function name: ShowElement()
** Descriptions	:	向界面的实验者结果窗口显示一个元素，
**                  该元素将被显示在窗口内的最底下一条
** Input:	
**          element_t data; 需要被显示的元素
** Output:  NONE
**   return:  类型：void
*******************************************************************************************/
extern void ShowElement(element_t data);

/*******************************************************************************************
** Function name: GetConcurrentSimTime()
** Descriptions	:	获取操作数据表的线程可并发执行阶段的仿真时间，
**                该时间用于模拟这些线程可并发执行的
**                时间阶段，不属于临界区。该时间越大，并发执行的效率越高
**                该时间可在界面调整
** Input:	
**          NONE
** Output:  
**   return:  类型：DWORD 毫秒级时间
*******************************************************************************************/
extern DWORD GetConcurrentSimTime();

/*******************************************************************************************
** Function name: GetDataProcSimTime()
** Descriptions	:	获取操作数据表的阶段的仿真时间粒度设置，
**                该时间用于模拟插入、删除等对表格进行操作的时间消耗，这些操作是不可并发，
**                时间粒度越大,并发执行的效率越低，如果不进行临界区保护，产生不确定性差错的概率越高
**                该时间可在界面调整
** Input:	
**          NONE
** Output:  
**   return:  类型：DWORD
*******************************************************************************************/
extern DWORD GetDataProcSimTime();

/*******************************************************************************************
** Function name: thread_get_table_length()
** Descriptions	:	从原数据表中取得顺序表长，是直接从界面上取的
** Input:	
**          NONE
** Output:  
**   return:  类型：int ,表长
*******************************************************************************************/
extern int thread_get_table_length();
/*******************************************************************************************
** Function name: thread_get_table_element()
** Descriptions	:	从原数据表中取得取得指定元素，是直接从界面上取的
** Input:	
**          int i; 指定位置
** Output:  
**   return:  NONE
*******************************************************************************************/
extern element_t thread_get_table_element(int i);
/*******************************************************************************************
** Function name: thread_put_table_element()
** Descriptions	:	将数据写入到原表的指定位置，是直接向界面写，注意不是插入，而是改写
**                  如果写入位置超过实际表长，先新增表项，再写入，如果超过太多，中间间隔的还要用无效数据填充
** Input:	
**          element_t data, 待写入的数据
**          int i;  写入位置
** Output:  
**   return:  类型：NONE
*******************************************************************************************/
extern void thread_put_table_element(element_t data,int i);
/*******************************************************************************************
** Function name: thread_set_table_length()
** Descriptions	:	改写表长, 在多线程不同步的情况，改写表长很容易丢失有效数据或新增无效数据
**                  为了仿得逼真，需要在待设表长大于真实表长时，新增无效数据；否则，删去末尾有效项目
** Input:	
**          NONE
** Output:  
**   return:  类型：int ,表长
*******************************************************************************************/
extern void thread_set_table_length(int len);

//线程结束标志，设置为1后，线程自动结束
extern int stop_thread_flag;

#endif